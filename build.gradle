buildscript {
    repositories {
        jcenter()
        maven { url = 'https://maven.minecraftforge.net' }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:5.1.+'
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.1.0'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'jacoco'

version = '1.12.2-0.0.4.2'
group = 'com.jamieswhiteshirt'
archivesBaseName = 'clothesline'

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

minecraft {
    mappings channel: 'stable', version: '39-1.12'
        runs {
        client {

            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            
        }
    }
}

repositories {
    jcenter()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
    maven {
        url 'https://maven.jamieswhiteshirt.com/libs-snapshot/'
    }
    maven {
        url 'https://maven.jamieswhiteshirt.com/libs-release/'
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

configurations {
    contained {
        transitive = false
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'

    compileOnly fg.deobf("curse.maven:mysticalmechanics-300742:3006392")
    runtimeOnly fg.deobf("curse.maven:mysticalmechanics-300742:3006392")
    
    contained 'com.jamieswhiteshirt:rtree-3i-lite:0.3.0'
    compileOnly 'com.jamieswhiteshirt:rtree-3i-lite:0.3.0'
    runtimeOnly 'com.jamieswhiteshirt:rtree-3i-lite:0.3.0'
    contained 'com.jamieswhiteshirt:clothesline-hooks:1.12.2-0.0.1.2'
    compileOnly fg.deobf('com.jamieswhiteshirt:clothesline-hooks:1.12.2-0.0.1.2')
    runtimeOnly fg.deobf('com.jamieswhiteshirt:clothesline-hooks:1.12.2-0.0.1.2')
    implementation 'org.junit.jupiter:junit-jupiter-api:5.2.+'
    runtimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.2.+'
    implementation 'org.mockito:mockito-core:2.+'
}

test {
    useJUnitPlatform()
}


processResources {
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
    inputs.property 'version', project.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        expand 'version':project.version, 'mcversion':'1.12.2'
    }
        
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    exclude '**/*.psd'
}

// We need two jars with slightly different dependency management.

// Let build systems handle the transitive dependencies of the jar
// The jar must not include contained dependencies
jar {
    from sourceSets.main.output


}

// The bundle jar is ready to be dropped in the mods folder and must contain its dependencies
// The bundle jar must include contained dependencies
task bundleJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
    classifier 'bundle'

    from sourceSets.main.output

    from(configurations.contained.files) {
        include '*'
        into 'META-INF/libraries'
    }

    manifest {
        attributes([
                'ContainedDeps': configurations.contained.files.collect { it.name }.join(' '),
                'Maven-Artifact': "${project.group}:${project.archivesBaseName}:${project.version}",
                'Timestamp': System.currentTimeMillis()
        ])
    }
}

reobf.create('bundleJar')

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}
